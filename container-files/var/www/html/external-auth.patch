diff --git a/helpers/auth.php b/helpers/auth.php
index 4cf77f8..1ad930b 100644
--- a/helpers/auth.php
+++ b/helpers/auth.php
@@ -38,6 +38,8 @@ class uAuth {
     $user = uUser::getFromSession();
     if ($user->isValid) {
       $this->setAuthenticated($user);
+    } else {
+      $this->checkExternalLogin();
     }
   }
 
@@ -91,6 +93,17 @@ class uAuth {
         $params["path"], $params["domain"],
         $params["secure"], $params["httponly"]
       );
+
+      // Remove external authentication cookies too
+      if (isset($_SERVER['HTTP_COOKIE'])) {
+        $cookies = exploe(';', $_SERVER['HTTP_COOKIE']);
+        foreach($cookies as $cookie) {
+          $parts = explode('=', $cookie);
+          $name = trim($parts[0]);
+          setcookie($name, '', time()-42000);
+          setcookie($name, '', time()-42000, '/');
+        }
+      }
     }
     session_destroy();
   }
@@ -207,4 +220,26 @@ class uAuth {
     return ($this->isAuthenticated() || !uConfig::getInstance()->requireAuthentication) && uConfig::getInstance()->publicTracks;
   }
 
+  /**
+   * Check valid external login
+   *
+   * @return boolean True if valid
+   */
+  public function checkExternalLogin() {
+    $headers = apache_request_headers();
+
+    if (isset($headers['X-Webauth-User'])) {
+      $user = new uUser($headers['X-Webauth-User'], true);
+
+      if ($user->isValid) {
+        error_log("Found user " . $headers['X-Webauth-User']);
+        $this->setAuthenticated($user);
+        $this->sessionCleanup();
+        $user->storeInSession();
+        return true;
+      }
+
+      return false;
+    }
+  }
 }
diff --git a/helpers/user.php b/helpers/user.php
index daddd74..a9aeedd 100644
--- a/helpers/user.php
+++ b/helpers/user.php
@@ -35,7 +35,7 @@ class uUser {
    *
    * @param string $login Login
    */
-  public function __construct($login = null) {
+  public function __construct($login = null, $create = false) {
     if (!empty($login)) {
       try {
         $query = "SELECT id, login, password, admin FROM " . self::db()->table('users') . " WHERE login = ? LIMIT 1";
@@ -47,6 +47,12 @@ class uUser {
         $stmt->bindColumn('admin', $this->isAdmin, PDO::PARAM_BOOL);
         if ($stmt->fetch(PDO::FETCH_BOUND)) {
           $this->isValid = true;
+	} elseif ($create) { // Create user if not found
+	  $pass = random_bytes(16);
+	  $this->id = $this->add($login, $pass);
+	  $this->login = $login;
+	  $this->hash = password_hash($pass, PASSWORD_DEFAULT);
+	  $this->isValid = true;
         }
       } catch (PDOException $e) {
         // TODO: handle exception
